# -*- coding: utf-8 -*-
from datetime import timedelta
import json
import os
from pathlib import Path
import re
import gettext
from helpers.setting_helper import get_config
from helpers.translation_helper import get_locales

USE_CACHE = get_config('general.cache.use')
CACHE_TIME_DELTA = timedelta(minutes=get_config('general.cache.max-age'))
CONFIG_WARNINGS = {}

def replacer(match):
    text = match.group(1)
    text = re.sub(r'([\"])', '“', text, 1)
    text = re.sub(r'([\"])', '”', text, 1)
    return text


def update_stylelint_rules():
    print('updates rules used in defaults/css-stylelint-standard.json')

    base_directory = Path(os.path.dirname(
        os.path.realpath(__file__)) + os.path.sep).parent
    rules_path = os.path.join(base_directory, 'node_modules', 'stylelint', 'lib', 'rules')
    rule_names = os.listdir(rules_path)

    rules = {}
    for rule_name in rule_names:
        rule_config = True

        rule_logic_path = os.path.join(base_directory, 'node_modules', 'stylelint', 'lib', 'rules', rule_name, 'index.mjs')
        if os.path.exists(rule_logic_path):
            with open(rule_logic_path, 'r', encoding='utf-8') as file:
                rule_logic_content = file.read()
                for line in rule_logic_content.splitlines():
                    stripped_line = line.strip()
                    if stripped_line.startswith('rejected:') and stripped_line.endswith('`,'):
                        message = stripped_line[stripped_line.find('`'):stripped_line.rfind('`,')].strip()
                        message = re.sub(r'\$\{[a-zA-Z]+\}', '%s', message).strip('`')
                        message = re.sub(r"([\"][^\"]+[\"])", replacer, message)
                        rule_config = [True, {"message": message}]
                        break

        if 'no-unknown' in rule_name:
            rules[rule_name] = rule_config
        elif 'no-deprecated' in rule_name:
            rules[rule_name] = rule_config
        elif 'no-invalid' in rule_name:
            rules[rule_name] = rule_config
        elif 'no-empty' in rule_name:
            rules[rule_name] = rule_config
        elif 'no-nonstandard' in rule_name:
            rules[rule_name] = rule_config

    # Sort the rules dictionary by key
    rules = dict(sorted(rules.items()))

    stylelint_standard_path = os.path.join(base_directory, 'defaults', 'css-stylelint-standard.json')
    with open(stylelint_standard_path, 'w', encoding='utf-8') as outfile:
        json.dump({
            'description': f'This file is automatically generated. Do not edit this file. Instead update helpers/update_stylelint_helper.py.',
            'rules': rules
        }, outfile, indent=4)

    available_languages = get_locales(base_directory)
    locales_dir = os.path.join(base_directory, 'locales')
    for language_code in available_languages:
        if language_code in ('en', 'gov'):
            continue

        print(f'updates rules used in defaults/css-stylelint-standard-{language_code}.json')

        language_rules = rules.copy()
        language = gettext.translation(
            'css_linting', localedir=locales_dir, languages=[language_code])
        language.install()

        for rule_name, rule_items in language_rules.items():
            if rule_items is not True:
                msg_id = rule_items[1]['message']

                rule_items[1]['message'] = language.gettext(msg_id)

        stylelint_standard_path = os.path.join(base_directory, 'defaults', f'css-stylelint-standard-{language_code}.json')
        with open(stylelint_standard_path, 'w', encoding='utf-8') as outfile:
            json.dump({
                'description': f'This file is automatically generated. Do not edit this file. Instead update the translation file locales/{language_code}/css_linting.po.',
                'rules': language_rules
            }, outfile, indent=4)

